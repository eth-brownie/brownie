{"contract_types":{"Math":{"abi":[],"compiler":{"name":"solc","settings":{"optimize":false},"version":"0.5.10+commit.5a6ea5b1"},"deployment_bytecode":{"bytecode":"0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7230582085c463bd2261975a6a728c29933c1a6b19f28a67a3ae64d46e1c1d149f9a3cd164736f6c634300050a0032"},"natspec":{"details":"Standard math utilities missing in the Solidity language.","methods":{}},"runtime_bytecode":{"bytecode":"0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7230582085c463bd2261975a6a728c29933c1a6b19f28a67a3ae64d46e1c1d149f9a3cd164736f6c634300050a0032"}}},"deployments":{"blockchain://d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3/block/bfb631d770940a93296e9b93f034f9f920ae311a8b37acd57ff0b55605beee73":{"Math":{"address":"0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2","contract_type":"Math"}}},"manifest_version":"2","meta":{"authors":["OpenZeppelin Community <maintainers@openzeppelin.org>"],"description":"These are math-related utilities. Sept. 30, 2019","keywords":["solidity","ethereum","smart","contracts","security","zeppelin"],"license":"MIT","links":{"documentation":"https://docs.openzeppelin.com/contracts/2.x/","repo":"https://github.com/OpenZeppelin/openzeppelin-contracts","website":"https://openzeppelin.com/contracts/"}},"package_name":"math","sources":{"./math/Math.sol":"pragma solidity ^0.5.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}"},"version":"1.0.0"}
